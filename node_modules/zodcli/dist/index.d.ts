import { AnyZodObject, z, ZodArray, ZodDefault, ZodEffects, ZodLiteral, ZodNull, ZodNumber, ZodObject, ZodOptional, ZodString, ZodUnion } from "zod";
export declare const booleanArgument: z.ZodUnion<[z.ZodEffects<z.ZodLiteral<"true">, boolean, "true">, z.ZodEffects<z.ZodLiteral<"false">, boolean, "false">, z.ZodEffects<z.ZodNull, boolean, null>]>;
type LowercaseLetters = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z";
type CamelCaseLetters<String> = String extends `${infer Left}${infer Right}` ? Left extends LowercaseLetters ? `${Left}${OnlyLetters<Right>}` : never : String;
type OnlyLetters<String> = String extends `${infer Left}${infer Right}` ? Lowercase<Left> extends LowercaseLetters ? `${Left}${OnlyLetters<Right>}` : never : String;
type OnlyLowercaseLetters<String> = String extends `${infer Left}${infer Right}` ? Left extends LowercaseLetters ? `${Left}${OnlyLowercaseLetters<Right>}` : never : String;
type ObjectWithPropertiesOfCamelCaseLetters<T> = {
    [K in keyof T as CamelCaseLetters<string & K>]: T[K];
};
type ObjectWithPropertiesOfLowercaseLetters<T> = {
    [K in keyof T as OnlyLowercaseLetters<string & K>]: T[K];
};
type ObjectWithOnlyTheseProperties<T, U extends keyof T> = Pick<T, U> & Record<Exclude<keyof T, U>, never>;
type ZodObjectWithOnlyTheseProperties<T extends AnyZodObject, U extends PropertyKey> = ZodObject<ObjectWithOnlyTheseProperties<T["shape"], U>>;
type ObjectWithOnlyPropertiesOfLowercaseLetters<T extends any> = ObjectWithOnlyTheseProperties<T, keyof ObjectWithPropertiesOfLowercaseLetters<T>>;
type ZodObjectWithOnlyPropertiesOfCamelCaseLetters<T extends AnyZodObject> = ZodObjectWithOnlyTheseProperties<T, keyof ObjectWithPropertiesOfCamelCaseLetters<T["shape"]>>;
type SupportedZodTypes = ZodString | ZodNumber | ZodLiteral<string | number> | ZodNull | ZodEffects<SupportedZodTypes, any, any> | ZodArray<SupportedZodTypes> | ZodUnion<[SupportedZodTypes, ...SupportedZodTypes[]]> | ZodOptional<SupportedZodTypes> | ZodDefault<SupportedZodTypes>;
type SomeObject<T> = {
    [K in keyof T]: T[K];
};
export declare const argumentParser: <Options extends ZodObjectWithOnlyPropertiesOfCamelCaseLetters<Options extends z.ZodObject<{
    [key: string]: SupportedZodTypes;
    [key: number]: SupportedZodTypes;
    [key: symbol]: SupportedZodTypes;
}, "strict", z.ZodTypeAny, {
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
}, {
    [x: string]: unknown;
    [x: number]: unknown;
    [x: symbol]: unknown;
}> ? Options : never>, Aliases extends SomeObject<Aliases extends ObjectWithOnlyPropertiesOfLowercaseLetters<Aliases> ? {
    [key: string]: string & keyof Options["shape"];
    [key: number]: string & keyof Options["shape"];
    [key: symbol]: string & keyof Options["shape"];
} : never>>({ options, aliases, }: {
    options: Options;
    aliases?: Aliases;
}) => z.ZodEffects<z.ZodArray<z.ZodString, "many">, z.objectUtil.addQuestionMarks<z.baseObjectOutputType<ObjectWithOnlyTheseProperties<(Options extends z.ZodObject<{
    [key: string]: SupportedZodTypes;
    [key: number]: SupportedZodTypes;
    [key: symbol]: SupportedZodTypes;
}, "strict", z.ZodTypeAny, {
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
}, {
    [x: string]: unknown;
    [x: number]: unknown;
    [x: symbol]: unknown;
}> ? Options : never)["shape"], keyof ObjectWithPropertiesOfCamelCaseLetters<(Options extends z.ZodObject<{
    [key: string]: SupportedZodTypes;
    [key: number]: SupportedZodTypes;
    [key: symbol]: SupportedZodTypes;
}, "strict", z.ZodTypeAny, {
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
}, {
    [x: string]: unknown;
    [x: number]: unknown;
    [x: symbol]: unknown;
}> ? Options : never)["shape"]>>>, (z.baseObjectOutputType<ObjectWithOnlyTheseProperties<(Options extends z.ZodObject<{
    [key: string]: SupportedZodTypes;
    [key: number]: SupportedZodTypes;
    [key: symbol]: SupportedZodTypes;
}, "strict", z.ZodTypeAny, {
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
}, {
    [x: string]: unknown;
    [x: number]: unknown;
    [x: symbol]: unknown;
}> ? Options : never)["shape"], keyof ObjectWithPropertiesOfCamelCaseLetters<(Options extends z.ZodObject<{
    [key: string]: SupportedZodTypes;
    [key: number]: SupportedZodTypes;
    [key: symbol]: SupportedZodTypes;
}, "strict", z.ZodTypeAny, {
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
}, {
    [x: string]: unknown;
    [x: number]: unknown;
    [x: symbol]: unknown;
}> ? Options : never)["shape"]>>> extends infer T_1 extends object ? { [k_1 in keyof T_1]: undefined extends z.baseObjectOutputType<ObjectWithOnlyTheseProperties<(Options extends z.ZodObject<{
    [key: string]: SupportedZodTypes;
    [key: number]: SupportedZodTypes;
    [key: symbol]: SupportedZodTypes;
}, "strict", z.ZodTypeAny, {
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
}, {
    [x: string]: unknown;
    [x: number]: unknown;
    [x: symbol]: unknown;
}> ? Options : never)["shape"], keyof ObjectWithPropertiesOfCamelCaseLetters<(Options extends z.ZodObject<{
    [key: string]: SupportedZodTypes;
    [key: number]: SupportedZodTypes;
    [key: symbol]: SupportedZodTypes;
}, "strict", z.ZodTypeAny, {
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
}, {
    [x: string]: unknown;
    [x: number]: unknown;
    [x: symbol]: unknown;
}> ? Options : never)["shape"]>>>[k_1] ? never : k_1; } : never)[keyof ObjectWithPropertiesOfCamelCaseLetters<(Options extends z.ZodObject<{
    [key: string]: SupportedZodTypes;
    [key: number]: SupportedZodTypes;
    [key: symbol]: SupportedZodTypes;
}, "strict", z.ZodTypeAny, {
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
}, {
    [x: string]: unknown;
    [x: number]: unknown;
    [x: symbol]: unknown;
}> ? Options : never)["shape"]> | Exclude<keyof (Options extends z.ZodObject<{
    [key: string]: SupportedZodTypes;
    [key: number]: SupportedZodTypes;
    [key: symbol]: SupportedZodTypes;
}, "strict", z.ZodTypeAny, {
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
}, {
    [x: string]: unknown;
    [x: number]: unknown;
    [x: symbol]: unknown;
}> ? Options : never)["shape"], keyof ObjectWithPropertiesOfCamelCaseLetters<(Options extends z.ZodObject<{
    [key: string]: SupportedZodTypes;
    [key: number]: SupportedZodTypes;
    [key: symbol]: SupportedZodTypes;
}, "strict", z.ZodTypeAny, {
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
}, {
    [x: string]: unknown;
    [x: number]: unknown;
    [x: symbol]: unknown;
}> ? Options : never)["shape"]>>]> extends infer T ? { [k in keyof T]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<ObjectWithOnlyTheseProperties<(Options extends z.ZodObject<{
    [key: string]: SupportedZodTypes;
    [key: number]: SupportedZodTypes;
    [key: symbol]: SupportedZodTypes;
}, "strict", z.ZodTypeAny, {
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
}, {
    [x: string]: unknown;
    [x: number]: unknown;
    [x: symbol]: unknown;
}> ? Options : never)["shape"], keyof ObjectWithPropertiesOfCamelCaseLetters<(Options extends z.ZodObject<{
    [key: string]: SupportedZodTypes;
    [key: number]: SupportedZodTypes;
    [key: symbol]: SupportedZodTypes;
}, "strict", z.ZodTypeAny, {
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
}, {
    [x: string]: unknown;
    [x: number]: unknown;
    [x: symbol]: unknown;
}> ? Options : never)["shape"]>>>, (z.baseObjectOutputType<ObjectWithOnlyTheseProperties<(Options extends z.ZodObject<{
    [key: string]: SupportedZodTypes;
    [key: number]: SupportedZodTypes;
    [key: symbol]: SupportedZodTypes;
}, "strict", z.ZodTypeAny, {
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
}, {
    [x: string]: unknown;
    [x: number]: unknown;
    [x: symbol]: unknown;
}> ? Options : never)["shape"], keyof ObjectWithPropertiesOfCamelCaseLetters<(Options extends z.ZodObject<{
    [key: string]: SupportedZodTypes;
    [key: number]: SupportedZodTypes;
    [key: symbol]: SupportedZodTypes;
}, "strict", z.ZodTypeAny, {
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
}, {
    [x: string]: unknown;
    [x: number]: unknown;
    [x: symbol]: unknown;
}> ? Options : never)["shape"]>>> extends infer T_1 extends object ? { [k_1 in keyof T_1]: undefined extends z.baseObjectOutputType<ObjectWithOnlyTheseProperties<(Options extends z.ZodObject<{
    [key: string]: SupportedZodTypes;
    [key: number]: SupportedZodTypes;
    [key: symbol]: SupportedZodTypes;
}, "strict", z.ZodTypeAny, {
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
}, {
    [x: string]: unknown;
    [x: number]: unknown;
    [x: symbol]: unknown;
}> ? Options : never)["shape"], keyof ObjectWithPropertiesOfCamelCaseLetters<(Options extends z.ZodObject<{
    [key: string]: SupportedZodTypes;
    [key: number]: SupportedZodTypes;
    [key: symbol]: SupportedZodTypes;
}, "strict", z.ZodTypeAny, {
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
}, {
    [x: string]: unknown;
    [x: number]: unknown;
    [x: symbol]: unknown;
}> ? Options : never)["shape"]>>>[k_1] ? never : k_1; } : never)[keyof ObjectWithPropertiesOfCamelCaseLetters<(Options extends z.ZodObject<{
    [key: string]: SupportedZodTypes;
    [key: number]: SupportedZodTypes;
    [key: symbol]: SupportedZodTypes;
}, "strict", z.ZodTypeAny, {
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
}, {
    [x: string]: unknown;
    [x: number]: unknown;
    [x: symbol]: unknown;
}> ? Options : never)["shape"]> | Exclude<keyof (Options extends z.ZodObject<{
    [key: string]: SupportedZodTypes;
    [key: number]: SupportedZodTypes;
    [key: symbol]: SupportedZodTypes;
}, "strict", z.ZodTypeAny, {
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
}, {
    [x: string]: unknown;
    [x: number]: unknown;
    [x: symbol]: unknown;
}> ? Options : never)["shape"], keyof ObjectWithPropertiesOfCamelCaseLetters<(Options extends z.ZodObject<{
    [key: string]: SupportedZodTypes;
    [key: number]: SupportedZodTypes;
    [key: symbol]: SupportedZodTypes;
}, "strict", z.ZodTypeAny, {
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
}, {
    [x: string]: unknown;
    [x: number]: unknown;
    [x: symbol]: unknown;
}> ? Options : never)["shape"]>>]>[k]; } : never, string[]>;
export {};
